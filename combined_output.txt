CreateApiViewModel.cs

using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using ReactiveUI;
using System.Reactive;

namespace QuickEndpoint.ViewModels;
public class CreateApiViewModel : ViewModelBase
{

    private bool _isCreatingApi;
    public bool IsCreatingApi
    {
        get => _isCreatingApi;
        set => this.RaiseAndSetIfChanged(ref _isCreatingApi, value);
    }

    private string _errorMessage;
    public string ErrorMessage
    {
        get => _errorMessage;
        set => this.RaiseAndSetIfChanged(ref _errorMessage, value);
    }

    private double _createApiProgress;
    public double CreateApiProgress
    {
        get => _createApiProgress;
        set => this.RaiseAndSetIfChanged(ref _createApiProgress, value);
    }

    private string _apiName;
    public string ApiName
    {
        get => _apiName;
        set => this.RaiseAndSetIfChanged(ref _apiName, value);
    }

    private string _nameOfApi;
    public string NameOfApi
    {
        get => _nameOfApi;
        set => this.RaiseAndSetIfChanged(ref _nameOfApi, value);
    }

    private string _descriptionOfApi;
    public string DescriptionOfApi
    {
        get => _descriptionOfApi;
        set => this.RaiseAndSetIfChanged(ref _descriptionOfApi, value);
    }

    // Command property
    public ReactiveCommand<Unit, Unit> CreateApiCommand { get; }

    public CreateApiViewModel()
    {
        // Initialize the command with a method to call
        CreateApiCommand = ReactiveCommand.CreateFromTask(CreateApiAsync);

        // Other initializations...
    }

    private async Task CreateApiAsync()
    {
        IsCreatingApi = true;
        CreateApiProgress = 0.0; // Start progress at 0%
        LogDebugInfo("CreateApi method execution started.");

        try
        {
            // Simulate initial setup work
            await Task.Delay(500); // Simulate some initial work
            CreateApiProgress = 0.1; // Update progress to 10%
            LogDebugInfo("Initial setup completed.");

            // Directory and project setup
            string baseDirectory = Environment.CurrentDirectory;
            string apisDirectory = Path.Combine(baseDirectory, "Data", "CreatedApis");
            if (!Directory.Exists(apisDirectory))
            {
                Directory.CreateDirectory(apisDirectory);
            }
            string projectDirectory = Path.Combine(apisDirectory, NameOfApi);
            if (Directory.Exists(projectDirectory))
            {
                ErrorMessage = "API with this name already exists.";
                return; // Wyjdź z metody, nie kontynuując tworzenia API
            }
            else
            {
                ErrorMessage = ""; // Wyczyść komunikat o błędzie, jeśli katalog nie istnieje
            }
            Directory.CreateDirectory(projectDirectory);
            LogDebugInfo("Project directory setup completed.");
            await Task.Delay(500); // Simulate time taken for directory setup
            CreateApiProgress = 0.3; // Update progress to 30%

            // Process start and execution
            var startInfo = new ProcessStartInfo
            {
                FileName = "dotnet",
                Arguments = "new webapp",
                WorkingDirectory = projectDirectory,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            };

            using (var process = new Process { StartInfo = startInfo })
            {
                process.Start();
                LogDebugInfo("dotnet process started.");
                while (!process.HasExited)
                {
                    await Task.Delay(1000); // Wait a bit before updating the progress
                    CreateApiProgress = Math.Min(CreateApiProgress + 0.2, 0.9); // Ensure progress does not exceed 90%
                }
                string output = await process.StandardOutput.ReadToEndAsync();
                string error = await process.StandardError.ReadToEndAsync();
                if (!string.IsNullOrEmpty(output))
                {
                    File.WriteAllText(Path.Combine(projectDirectory, "api_creation_output.txt"), output);
                }
                if (!string.IsNullOrEmpty(error))
                {
                    LogDebugInfo($"dotnet process error: {error}");
                }
            }

            await Task.Delay(500); // Finalize everything
            CreateApiProgress = 1.0; // Ensure progress is set to 100% after completion
            await Task.Delay(500); // Finalize everything
            LogDebugInfo("API creation process completed.");
        }
        catch (Exception ex)
        {
            LogDebugInfo($"An error occurred: {ex.Message}");
        }
        finally
        {
            IsCreatingApi = false;
        }
    }

    private void LogDebugInfo(string message)
    {
        // Append the timestamp to every log entry for better tracking
        string logEntry = $"{DateTime.Now}: {message}\n";
        File.AppendAllText("debug.log", logEntry);
    }
}

DashboardViewModel.cs

using ReactiveUI;
using System;

namespace QuickEndpoint.ViewModels;
    public class DashboardViewModel : ViewModelBase
    {
        private string _apiName;
        public string ApiName
        {
            get => _apiName;
            set => this.RaiseAndSetIfChanged(ref _apiName, value);
        }

        public override string Greeting => "Hello from DashboardViewModel";

    }


EditApiDetailsViewModel.cs

using ReactiveUI;
using Avalonia.Collections;
using System.Reactive;

namespace QuickEndpoint.ViewModels;
    public class EditApiDetailsViewModel : ViewModelBase
    {
        private AvaloniaList<string> _availableEndpoints;
        private string _selectedEndpoint;

            private string _apiName;

        public string ApiName
        {
            get => _apiName;
            set => this.RaiseAndSetIfChanged(ref _apiName, value);
        }

        public EditApiDetailsViewModel()
        {
            // Initialize commands
            RefreshApiListCommand = ReactiveCommand.Create(RefreshApiList);

            // Placeholder data for AvailableEndpoints
            AvailableEndpoints = new AvaloniaList<string> { "Endpoint 1", "Endpoint 2", "Endpoint 3" };

            // Initialize other properties if necessary
        }

        public AvaloniaList<string> AvailableEndpoints
        {
            get => _availableEndpoints;
            set => this.RaiseAndSetIfChanged(ref _availableEndpoints, value);
        }

        public string SelectedEndpoint
        {
            get => _selectedEndpoint;
            set => this.RaiseAndSetIfChanged(ref _selectedEndpoint, value);
        }

        public ReactiveCommand<Unit, Unit> RefreshApiListCommand { get; }

        private void RefreshApiList()
        {
            // Simulate refreshing the list of endpoints. In a real application, this might involve fetching data from a database or an API.
            AvailableEndpoints.Clear();
            AvailableEndpoints.Add("Updated Endpoint 1");
            AvailableEndpoints.Add("Updated Endpoint 2");
            AvailableEndpoints.Add("Updated Endpoint 3");

            // Optionally, reset the selected endpoint or handle as needed.
        }

        // Include additional functionality as necessary, such as commands for editing specific endpoints, adding new ones, etc.
    }

EditApiViewModel.cs

using ReactiveUI;
using System;
using System.IO;
using System.Linq;
using System.Reactive;
using Avalonia.Collections;

namespace QuickEndpoint.ViewModels;
public class EditApiViewModel : ViewModelBase
{
    private string _apiName;
    private AvaloniaList<string> _availableApis = new AvaloniaList<string>();
    public ReactiveCommand<Unit, Unit> EditApiCommand { get; }
    public ReactiveCommand<Unit, Unit> RefreshApiListCommand { get; }

    public string ApiName
    {
        get => _apiName;
        set => this.RaiseAndSetIfChanged(ref _apiName, value);
    }

    public AvaloniaList<string> AvailableApis
    {
        get => _availableApis;
        set => this.RaiseAndSetIfChanged(ref _availableApis, value);
    }

        public EditApiViewModel()
        {
            EditApiCommand = ReactiveCommand.Create(EditApi);
            RefreshApiListCommand = ReactiveCommand.Create(RefreshAvailableApis);

            // Initial refresh to populate available APIs.
            RefreshAvailableApis(); 
        }

        private void EditApi()
        {
            // Assuming MainWindowViewModel.Current has been implemented to allow changing the current ViewModel.
            var editDetailsViewModel = new EditApiDetailsViewModel
            {
                ApiName = this.ApiName // Passing the ApiName to the new ViewModel.
            };
            
            // Now, you would set this ViewModel to be the current one shown in the MainWindow or the relevant container.
            MainWindowViewModel.Current.CurrentViewModel = editDetailsViewModel;
        }


        public void RefreshAvailableApis()
        {
            try
            {
                LogDebugInfo("Starting to refresh available APIs...");

                string apisDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Data", "CreatedApis");
                LogDebugInfo($"Looking for APIs in directory: {apisDirectory}");

                if (Directory.Exists(apisDirectory))
                {
                    var apiDirectories = Directory.GetDirectories(apisDirectory).Select(Path.GetFileName).ToList();
                    
                    LogDebugInfo($"Found {apiDirectories.Count} API directories.");
                    
                    AvailableApis.Clear();
                    foreach (var dir in apiDirectories)
                    {
                        AvailableApis.Add(dir);
                        LogDebugInfo($"Added API directory to list: {dir}");
                    }
                }
                else
                {
                    LogDebugInfo("APIs directory does not exist.");
                }

                LogDebugInfo("Finished refreshing available APIs.");
            }
            catch (Exception ex)
            {
                LogDebugInfo($"An error occurred while refreshing available APIs: {ex.Message}");
            }
        }

        private void LogDebugInfo(string message)
        {
            // Ensure the debug log file path is correct and accessible.
            string logFilePath = Path.Combine(Directory.GetCurrentDirectory(), "debug.log");

            // Append the timestamp to every log entry for better tracking.
            string logEntry = $"{DateTime.Now}: {message}\n";
            File.AppendAllText(logFilePath, logEntry);
        }
    }

MainWindowViewModel.cs

﻿using System;
using ReactiveUI;
using System.Reactive;

namespace QuickEndpoint.ViewModels;
    public class MainWindowViewModel : ReactiveObject
    {
        public ReactiveCommand<Unit, Unit> CreateApiCommand { get; }
        public ReactiveCommand<Unit, Unit> EditApiCommand { get; }
        public ReactiveCommand<Unit, Unit> PublishApiCommand { get; }
        public ReactiveCommand<Unit, Unit> OpenSettingsCommand { get; }
        private static MainWindowViewModel _current;
        public static MainWindowViewModel Current => _current;
        private ViewModelBase _currentViewModel;
        public ViewModelBase CurrentViewModel
        {
            get => _currentViewModel;
            set => this.RaiseAndSetIfChanged(ref _currentViewModel, value);
        }

        public MainWindowViewModel()
        {
            CreateApiCommand = ReactiveCommand.Create(() => ExecuteCreateApi());
            EditApiCommand = ReactiveCommand.Create(() => ExecuteEditApi());
            PublishApiCommand = ReactiveCommand.Create(() => ExecutePublishApi());
            OpenSettingsCommand = ReactiveCommand.Create(() => ExecuteOpenSettings());

            // Ustawienie początkowego ViewModelu
            CurrentViewModel = new DashboardViewModel();
            _current = this;
        }

        private void ExecuteCreateApi()
        {
            CurrentViewModel = new CreateApiViewModel();
        }

        private void ExecuteEditApi()
        {
            CurrentViewModel = new EditApiViewModel();
        }

        private void ExecutePublishApi()
        {
            CurrentViewModel = new PublishApiViewModel();
        }

        private void ExecuteOpenSettings()
        {
            CurrentViewModel = new OpenSettingsViewModel();
        }
    }


OpenSettingsViewModel.cs

using Avalonia;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Markup.Xaml.Styling;
using Avalonia.Styling;
using ReactiveUI;
using System;

namespace QuickEndpoint.ViewModels;
    public class OpenSettingsViewModel : ViewModelBase
    {
        private bool _isDarkThemeEnabled;

        // Property to track if dark theme is enabled
        public bool IsDarkThemeEnabled
        {
            get => _isDarkThemeEnabled;
            set
            {
                this.RaiseAndSetIfChanged(ref _isDarkThemeEnabled, value);
                ApplyTheme(value);
            }
        }

        private void ApplyTheme(bool useDarkTheme)
        {
            // Construct the URI for the theme resource
            var themeUri = useDarkTheme ? 
                "avares://QuickEndpoint/Themes/DarkTheme.axaml" :
                "avares://QuickEndpoint/Themes/LightTheme.axaml";

            var theme = new StyleInclude(new Uri(themeUri))
            {
                Source = new Uri(themeUri)
            };

            if (Application.Current.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                // Assuming there is a main window and its styles can be manipulated
                desktop.MainWindow.Styles.Clear();
                desktop.MainWindow.Styles.Add(theme);
            }
        }
    }


PublishApiViewModel.cs

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reactive;
using Avalonia.Collections;
using ReactiveUI;
using QuickEndpoint_MainApp.Modules;
using System.Threading.Tasks;

namespace QuickEndpoint.ViewModels
{
    public class PublishApiViewModel : ViewModelBase
    {
        private string _apiName;
        private AvaloniaList<string> _availableApis = new AvaloniaList<string>();
        public ReactiveCommand<Unit, Unit> PublishApiCommand { get; }
        public ReactiveCommand<Unit, Unit> RefreshApiListCommand { get; }

        private bool _isPublishingApi;
        public bool IsPublishingApi
        {
            get => _isPublishingApi;
            set => this.RaiseAndSetIfChanged(ref _isPublishingApi, value);
        }

        private double _publishApiProgress;
        public double publishApiProgress
        {
            get => _publishApiProgress;
            set => this.RaiseAndSetIfChanged(ref _publishApiProgress, value);
        }

        public string ApiName
        {
            get => _apiName;
            set => this.RaiseAndSetIfChanged(ref _apiName, value);
        }

        public AvaloniaList<string> AvailableApis
        {
            get => _availableApis;
            set => this.RaiseAndSetIfChanged(ref _availableApis, value);
        }
        public string ApiName1 { get => _apiName; set => _apiName = value; }
        public AvaloniaList<string> AvailableApis1 { get => _availableApis; set => _availableApis = value; }
        public bool IsPublishingApi1 { get => _isPublishingApi; set => _isPublishingApi = value; }
        public double PublishApiProgress { get => _publishApiProgress; set => _publishApiProgress = value; }

        public PublishApiViewModel()
        {
            PublishApiCommand = ReactiveCommand.CreateFromTask(PublishApiAsync);
            RefreshApiListCommand = ReactiveCommand.Create(RefreshAvailableApis);

            // Initial refresh to populate available APIs.
            RefreshAvailableApis();
        }

        private async Task PublishApiAsync()
        {
            if (string.IsNullOrEmpty(ApiName))
            {
                LogDebugInfo("No API selected for publishing.");
                return;
            }

            try
            {
                IsPublishingApi = true;
                LogDebugInfo("PublishApi method execution started.");

                // Step 1: Setup directories
                await Task.Delay(250);
                publishApiProgress = 0; // Indicate initial setup is starting

                string baseDirectory = Environment.CurrentDirectory;
                string sourceProjectDir = Path.Combine(baseDirectory, "Data", "CreatedApis", ApiName);
                string publishedApisDir = Path.Combine(baseDirectory, "Data", "PublishedApis", ApiName);
                string toolsDir = Path.Combine(baseDirectory, "Data", "Tools", "nssm", "win64");
                Directory.CreateDirectory(publishedApisDir);
                LogDebugInfo("Directories setup completed.");

                // Step 2: Publish the API
                await Task.Delay(500);
                publishApiProgress = 0.4; // Indicate publishing starts

                string configuration = "Release";
                ApplicationPublisher.PublishApplication(sourceProjectDir, publishedApisDir, configuration, LogDebugInfo);
                LogDebugInfo("API published.");

                // Step 3: Copy necessary tools
                await Task.Delay(500);
                publishApiProgress = 0.6; // Publishing completed
                string nssmSourcePath = Path.Combine(toolsDir, "nssm.exe");
                string nssmDestinationPath = Path.Combine(publishedApisDir, "nssm.exe");
                if (File.Exists(nssmSourcePath))
                {
                    File.Copy(nssmSourcePath, nssmDestinationPath, overwrite: true);
                    LogDebugInfo("nssm.exe has been copied to the published API directory.");
                }
                else
                {
                    LogDebugInfo("nssm.exe was not found in the tools directory.");
                }

                // Step 4: Generate install and uninstall scripts
                await Task.Delay(500);
                publishApiProgress = 0.8; // Tool copy completed

                InstallerScriptGenerator.GenerateBatchInstallScript(ApiName, publishedApisDir, LogDebugInfo);
                InstallerScriptGenerator.GenerateBatchUninstallScript(ApiName, publishedApisDir, LogDebugInfo);
                LogDebugInfo($"Scripts for '{ApiName}' generated.");

                // Setp 5: Finalize the process
                publishApiProgress = 1.0; // Update progress to 100% after completion
                await Task.Delay(500);

                LogDebugInfo("API publishing process completed.");
            }
            catch (Exception ex)
            {
                LogDebugInfo($"An error occurred while publishing API '{ApiName}': {ex.Message}");
            }
            finally
            {
                IsPublishingApi = false;
            }
        }



        public void RefreshAvailableApis()
        {
            try
            {
                string apisDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Data", "CreatedApis");
                if (Directory.Exists(apisDirectory))
                {
                    var apiDirectories = Directory.GetDirectories(apisDirectory).Select(Path.GetFileName).ToList();
                    AvailableApis.Clear();
                    AvailableApis.AddRange(apiDirectories);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred while refreshing available APIs: {ex.Message}");
            }
        }

        private void LogDebugInfo(string message)
        {
            // Append the timestamp to every log entry for better tracking
            string logEntry = $"{DateTime.Now}: {message}\n";
            File.AppendAllText("debug.log", logEntry);
        }
    }
}

namespace QuickEndpoint_MainApp.Modules
{

    public static class ApplicationPublisher
    {
        public static void PublishApplication(string projectDir, string publishDir, string configuration, Action<string> logger)
        {
            Utilities.ExecuteProcess("dotnet", $"publish \"{projectDir}\" -c {configuration} -o \"{publishDir}\"", logger);
            logger($"The application has been published to {publishDir}");
        }
    }

    public static class InstallerScriptGenerator
    {
        public static void GenerateBatchInstallScript(string appName, string directory, Action<string> logger)
        {
            string installScriptPath = Path.Combine(directory, "install.bat");
            string batchContent = @$"@echo off
                                  echo Installing {appName}...
                                  REM Example command to install service using NSSM and current directory for paths
                                  cd /d %~dp0
                                  nssm.exe install {appName} ""%~dp0{appName}.exe""
                                  echo Installation completed.
                                  pause";

            File.WriteAllText(installScriptPath, batchContent);
            logger($"Install script has been saved at: {installScriptPath}");
        }

        public static void GenerateBatchUninstallScript(string appName, string directory, Action<string> logger)
        {
            string uninstallScriptPath = Path.Combine(directory, "uninstall.bat");
            string batchContent = @$"@echo off
                                  echo Uninstalling {appName}...
                                  REM Example command to uninstall service using NSSM
                                  cd /d %~dp0
                                  nssm.exe remove {appName} confirm
                                  echo Uninstallation completed.
                                  pause";

            File.WriteAllText(uninstallScriptPath, batchContent);
            logger($"Uninstall script has been saved at: {uninstallScriptPath}");
        }
    }


    public static class Utilities
    {
        public static string GetProjectBaseDirectory()
        {
            var currentDir = Directory.GetCurrentDirectory();
            return Directory.GetParent(currentDir)?.FullName ?? throw new InvalidOperationException("Cannot find the parent directory.");
        }

        public static void EnsureDirectoryExists(string path)
        {
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
        }

        public static void ExecuteProcess(string fileName, string arguments, Action<string> logger)
        {
            using var process = Process.Start(new ProcessStartInfo
            {
                FileName = fileName,
                Arguments = arguments,
                RedirectStandardOutput = true,
                RedirectStandardError = true,
                UseShellExecute = false,
                CreateNoWindow = true
            });

            var output = process.StandardOutput.ReadToEnd();
            var error = process.StandardError.ReadToEnd();

            process.WaitForExit();

            if (!string.IsNullOrEmpty(output))
            {
                logger(output);
            }

            if (!string.IsNullOrEmpty(error))
            {
                logger("Error: " + error);
            }

            if (process.ExitCode != 0)
            {
                throw new InvalidOperationException($"Process exited with code: {process.ExitCode}. Error: {output}");
            }
        }
    }
}


ViewModelBase.cs

﻿using ReactiveUI;

namespace QuickEndpoint.ViewModels;

public class ViewModelBase : ReactiveObject
{
    public virtual string Greeting => "Hello from Base ViewModel";
}


CreateApiView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
             xmlns:c="clr-namespace:QuickEndpoint.Converters"
             x:Class="QuickEndpoint.Views.CreateApiView"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Stretch"
             x:CompileBindings="True"
             x:DataType="vm:CreateApiViewModel">

    <UserControl.Resources>
        <c:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </UserControl.Resources>

    <UserControl.Styles>
        <Style Selector="TextBlock.H1">
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Margin" Value="0,16,0,10"/> <!-- Adjusted margin to add space below -->
            <Setter Property="HorizontalAlignment" Value="Center"/> <!-- Center alignment -->
        </Style>
        <Style Selector="TextBox">
            <Setter Property="Margin" Value="0,10,0,0"/>
            <Setter Property="Width" Value="250"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style Selector="Button">
            <Setter Property="Margin" Value="20,20,20,0"/> <!-- Adjusted margin for symmetry -->
            <Setter Property="Padding" Value="10"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="CornerRadius" Value="5"/>
            <Setter Property="Width" Value="300"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style Selector="ProgressBar">
            <Setter Property="Margin" Value="20,20,20,0"/> <!-- Adjusted margin for symmetry -->
            <Setter Property="Height" Value="20"/>
            <Setter Property="Maximum" Value="1"/>
            <Setter Property="Width" Value="300"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
    </UserControl.Styles>

    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/> <!-- For the Name pair -->
            <ColumnDefinition Width="20"/>  <!-- Margin between the pairs -->
            <ColumnDefinition Width="Auto"/> <!-- For the Description pair -->
        </Grid.ColumnDefinitions>

        <!-- Name Pair -->
        <StackPanel Grid.Row="0" Grid.Column="0" HorizontalAlignment="Center">
            <TextBlock Text="Name" Classes="H1"/>
            <TextBox Text="{Binding NameOfApi, Mode=TwoWay}" x:DataType="vm:CreateApiViewModel"/>
        </StackPanel>

        <!-- Description Pair -->
        <StackPanel Grid.Row="0" Grid.Column="2" HorizontalAlignment="Center">
            <TextBlock Text="Description" Classes="H1"/>
            <TextBox Text="{Binding DescriptionOfApi, Mode=TwoWay}" x:DataType="vm:CreateApiViewModel"/>
        </StackPanel>

        <!-- Create API Button -->
        <Button Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3"
                Command="{Binding CreateApiCommand}" Content="Create API" x:DataType="vm:CreateApiViewModel"/>

        <!-- ProgressBar -->
        <ProgressBar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3"
                     IsVisible="{Binding IsCreatingApi}" 
                     Value="{Binding CreateApiProgress, Mode=OneWay}" x:DataType="vm:CreateApiViewModel"/>

        <!-- Error Message -->
        <TextBlock Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3"
                   Text="{Binding ErrorMessage, Mode=OneWay}" 
                   TextWrapping="Wrap" Foreground="Red" FontWeight="Bold" x:DataType="vm:CreateApiViewModel"/>
    </Grid>
</UserControl>


CreateApiView.axaml.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class CreateApiView : UserControl
    {
        public CreateApiView()
        {
            InitializeComponent();
            DataContext = new CreateApiViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


DashboardView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="QuickEndpoint.Views.DashboardView">
    

        <UserControl.Styles>
            <Style Selector="TextBlock.H1">
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
            </Style>
            <Style Selector="TextBlock.H2">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
            </Style>
        </UserControl.Styles>
    
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Classes="H1">Welcome to the QuickEndpoint</TextBlock>
            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Classes="H2" Text="Start creating your own API!"/>
        </StackPanel>
        
</UserControl>


DashboardView.axaml.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class DashboardView : UserControl
    {
        public DashboardView()
        {
            InitializeComponent();
            DataContext = new DashboardViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


EditApiDetailsView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="QuickEndpoint.Views.EditApiDetailsView"
             HorizontalAlignment="Stretch"
             VerticalAlignment="Stretch"
             xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
             x:CompileBindings="True">

    <DockPanel LastChildFill="True">
        <!-- Left Sidebar for Navigation -->
        <ListBox DockPanel.Dock="Left" Width="200" ItemsSource="{Binding AvailableEndpoints}"
                 SelectedItem="{Binding SelectedEndpoint}" x:DataType="vm:EditApiDetailsViewModel">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding}" />
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- Right upper corner for API Name and other details -->
        <StackPanel HorizontalAlignment="Stretch">
            <TextBlock Text="{Binding ApiName}" HorizontalAlignment="Right" Margin="10" 
                       VerticalAlignment="Top" FontSize="16" FontWeight="Bold"
                       x:DataType="vm:EditApiDetailsViewModel"/>
            <!-- Other content goes here -->
        </StackPanel>
    </DockPanel>
</UserControl>


EditApiDetailsView.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class EditApiDetailsView : UserControl
    {
        public EditApiDetailsView()
        {
            InitializeComponent();
            DataContext = new EditApiDetailsViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


EditApiView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="QuickEndpoint.Views.EditApiView"
             xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
             x:CompileBindings="True"
             HorizontalAlignment="Center"
             VerticalAlignment="Center">
    
    <UserControl.DataContext>
        <vm:EditApiViewModel/>
    </UserControl.DataContext>

    <UserControl.Styles>
        <Style Selector="TextBlock.H1">
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
        </Style>
        <Style Selector="TextBlock.H2">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
        </Style>
    </UserControl.Styles>

    <!-- Outer Grid to Center the Content Vertically -->
    <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
        <Border VerticalAlignment="Center" HorizontalAlignment="Center">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/> <!-- Title "Edit API" -->
                    <RowDefinition Height="Auto"/> <!-- ComboBox -->
                    <RowDefinition Height="Auto"/> <!-- Buttons Panel -->
                </Grid.RowDefinitions>

                <!-- Title "Edit API" -->
                <TextBlock Grid.Row="0" Classes="H1" Text="Edit API" Margin="10" />

                <!-- ComboBox -->
                <ComboBox Grid.Row="1" Name="Select" Margin="10" HorizontalAlignment="Center" 
                          ItemsSource="{Binding AvailableApis}" SelectedItem="{Binding ApiName}" x:DataType="vm:EditApiViewModel"  
                          Width="290" Classes="H1">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>

                <!-- Buttons Panel -->
                <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center">
                    <Button Content="Edit Selected API" Classes="H2" Command="{Binding EditApiCommand}" Margin="10" x:DataType="vm:EditApiViewModel"/>
                    <Button Content="Refresh API List" Classes="H2" Command="{Binding RefreshApiListCommand}" Margin="10" x:DataType="vm:EditApiViewModel"/>
                </StackPanel>
            </Grid>
        </Border>
    </Grid>
</UserControl>


EditApiView.axaml.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class EditApiView : UserControl
    {
        public EditApiView()
        {
            InitializeComponent();
            DataContext = new EditApiViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


MainWindow.axaml

<Window xmlns="https://github.com/avaloniaui"
       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
       xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
       xmlns:v="clr-namespace:QuickEndpoint.Views"
       x:Class="QuickEndpoint.Views.MainWindow"
       Icon="/Assets/avalonia-logo.ico"
       Title="QuickEndpoint"
       x:CompileBindings="True"
       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
       d:DesignWidth="800" d:DesignHeight="450">

  <Design.DataContext>
    <vm:MainWindowViewModel/>
  </Design.DataContext>

  <DockPanel>
    <Menu DockPanel.Dock="Bottom">
      <MenuItem Header="API">
        <MenuItem Header="Create API" Command="{Binding CreateApiCommand}" x:DataType="vm:MainWindowViewModel"/>
        <MenuItem Header="Edit API" Command="{Binding EditApiCommand}" x:DataType="vm:MainWindowViewModel"/>
        <MenuItem Header="Publish API" Command="{Binding PublishApiCommand}" x:DataType="vm:MainWindowViewModel"/>
      </MenuItem>
      <MenuItem Header="Settings" Command="{Binding OpenSettingsCommand}" x:DataType="vm:MainWindowViewModel"/>
    </Menu>

    <Grid DockPanel.Dock="Right">
      <ContentControl Content="{Binding CurrentViewModel}" x:DataType="vm:MainWindowViewModel" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">

      </ContentControl>
    </Grid>
  </DockPanel>

</Window>


MainWindow.axaml.cs

using Avalonia.Controls;
using Avalonia;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainWindowViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
            this.AttachDevTools();  // Call AttachDevTools here
        }
    }
}


OpenSettingsView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="QuickEndpoint.Views.OpenSettingsView"
             xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
             xmlns:c="clr-namespace:QuickEndpoint.Converters"
             x:CompileBindings="True">

    <UserControl.DataContext>
        <vm:OpenSettingsViewModel/>
    </UserControl.DataContext>

    <UserControl.Resources>
        <c:BooleanToVisibilityConverter x:Key="BooleanToThemeConverter"/>
    </UserControl.Resources>

    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
        <!-- Theme Toggle Switch -->
        <TextBlock Text="Theme:" VerticalAlignment="Center" Margin="0,0,10,0"/>
        <ToggleButton IsChecked="{Binding IsDarkThemeEnabled, Mode=TwoWay}" 
                      Content="{Binding IsDarkThemeEnabled, Converter={StaticResource BooleanToThemeConverter}}"
                      HorizontalAlignment="Center"
                      x:DataType="vm:OpenSettingsViewModel"/>
    </StackPanel>
</UserControl>


OpenSettingsView.axaml.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class OpenSettingsView : UserControl
    {
        public OpenSettingsView()
        {
            InitializeComponent();
            DataContext = new OpenSettingsViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


PublishApiView.axaml

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="QuickEndpoint.Views.PublishApiView"
             xmlns:vm="clr-namespace:QuickEndpoint.ViewModels"
             xmlns:c="clr-namespace:QuickEndpoint.Converters"
             x:CompileBindings="True"
             HorizontalAlignment="Center"
             VerticalAlignment="Center">


    <UserControl.DataContext>
        <vm:PublishApiViewModel/>
    </UserControl.DataContext>

    <UserControl.Resources>
        <c:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </UserControl.Resources>

    <UserControl.Styles>
        <Style Selector="TextBlock.H1">
            <Setter Property="FontSize" Value="24"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
        </Style>
        <Style Selector="TextBlock.H2">
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="TextAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,10"/>
        </Style>
    </UserControl.Styles>

<Grid VerticalAlignment="Center" HorizontalAlignment="Center">
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/> <!-- Title "Edit API" -->
        <RowDefinition Height="Auto"/> <!-- ComboBox -->
        <RowDefinition Height="Auto"/> <!-- Buttons Panel -->
    </Grid.RowDefinitions>

    <!-- Title "Edit API" -->
    <TextBlock Grid.Row="0"
               Classes="H1"  
               Text="Publish API"
               Margin="10"
               FontSize="20"
               HorizontalAlignment="Center"/>

    <!-- ComboBox -->
    <ComboBox Grid.Row="1"
              Name="Select"
              Margin="10"
              HorizontalAlignment="Center"
              ItemsSource="{Binding AvailableApis}"
              x:DataType="vm:PublishApiViewModel"
              SelectedItem="{Binding ApiName}"
              Width="310"
              Classes="H1">
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <TextBlock Text="{Binding}"/>
            </DataTemplate>
        </ComboBox.ItemTemplate>
    </ComboBox>

    <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center">
        <Button Content="Publish Selected API"
                Classes="H2"
                x:DataType="vm:PublishApiViewModel"
                Command="{Binding PublishApiCommand}"
                Margin="10"/>
        <Button Content="Refresh API List"
                Classes="H2"
                x:DataType="vm:PublishApiViewModel"
                Command="{Binding RefreshApiListCommand}"
                Margin="10"/>
    </StackPanel>

    <ProgressBar Grid.Row="5"
                 IsVisible="{Binding IsPublishingApi}"
                 x:DataType="vm:PublishApiViewModel"
                 Value="{Binding publishApiProgress, Mode=OneWay}"
                 Height="20"
                 Maximum="1"
                 Margin="0,25,0,0"/>
</Grid>

</UserControl>



PublishApiView.axaml.cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using QuickEndpoint.ViewModels;

namespace QuickEndpoint.Views
{
    public partial class PublishApiView : UserControl
    {
        public PublishApiView()
        {
            InitializeComponent();
            DataContext = new PublishApiViewModel();
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}


